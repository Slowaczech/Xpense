name: 🎯 Ultimate Working Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  ultimate-build:
    runs-on: ubuntu-20.04  # Starší Ubuntu s libtinfo5
    timeout-minutes: 90
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🐍 Python 3.8 (Stable for Buildozer)
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: ☕ Java 8 (Compatible with older Android tools)
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '8'

    - name: 📦 Install ALL required dependencies (Ubuntu 20.04)
      run: |
        # Update package lists
        sudo apt-get update -qq
        
        # Install essential build tools
        sudo apt-get install -y --no-install-recommends \
          python3-pip \
          python3-setuptools \
          python3-dev \
          build-essential \
          git \
          unzip \
          wget \
          curl \
          ca-certificates
        
        # Install Android/NDK dependencies
        sudo apt-get install -y --no-install-recommends \
          libtinfo5 \
          zlib1g-dev \
          libncurses5-dev \
          libffi-dev \
          libssl-dev
        
        # Install multimedia libraries for Kivy
        sudo apt-get install -y --no-install-recommends \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          libjpeg-dev
        
        # Install X11 libraries for headless Kivy (fixes X server error)
        sudo apt-get install -y --no-install-recommends \
          xvfb \
          x11-utils \
          libx11-dev \
          libxext-dev \
          libxrender-dev \
          libxinerama-dev \
          libxi-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxcomposite-dev \
          libxdamage-dev \
          libxfixes-dev \
          libxss-dev
        
        echo "✅ All dependencies installed successfully"

    - name: 🐍 Install Python packages (exact versions)
      run: |
        python3 -m pip install --upgrade pip==21.3.1
        pip install setuptools==59.6.0 wheel==0.37.1
        pip install cython==0.29.28
        pip install buildozer==1.3.0
        
        echo "✅ Python packages installed"
        echo "=== VERSIONS ==="
        python3 --version
        pip --version
        buildozer version

    - name: 🔧 Setup virtual display (fixes X server error)
      run: |
        # Start virtual display for headless Kivy
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2
        echo "DISPLAY=:99" >> $GITHUB_ENV
        echo "✅ Virtual display started"

    - name: ⚙️ Create minimal working buildozer.spec
      run: |
        cat > buildozer.spec << 'EOF'
        [app]
        title = XpenseApp
        package.name = xpenseapp
        package.domain = com.example.xpense
        
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas,txt
        
        version = 1.0
        
        requirements = python3,kivy==2.0.0
        
        [buildozer]
        log_level = 2
        warn_on_root = 1
        
        [app:android]
        android.api = 28
        android.minapi = 21
        android.ndk = 19b
        android.accept_sdk_license = True
        android.arch = armeabi-v7a
        android.gradle_dependencies = 
        android.add_jars = 
        android.add_src = 
        android.add_aars = 
        EOF
        
        echo "✅ Buildozer spec created"
        cat buildozer.spec

    - name: 🧪 Create headless Kivy app (no GUI requirements)
      run: |
        cat > main.py << 'EOF'
        import os
        os.environ['KIVY_GL_BACKEND'] = 'gl'
        
        from kivy.app import App
        from kivy.uix.label import Label
        from kivy.config import Config
        
        # Configure for headless operation
        Config.set('graphics', 'headless', '1')
        
        class XpenseTestApp(App):
            def build(self):
                return Label(text='Xpense APK Build - SUCCESS!')
        
        if __name__ == '__main__':
            XpenseTestApp().run()
        EOF
        
        echo "✅ Headless Kivy app created"
        cat main.py

    - name: 🔧 Cache build directories
      uses: actions/cache@v4
      with:
        path: |
          .buildozer
          .buildozer_global
        key: buildozer-ultimate-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-ultimate-${{ runner.os }}-

    - name: 🚀 Build Android APK
      run: |
        # Set up environment
        export DISPLAY=:99
        export USE_SDK_WRAPPER=1
        export GRADLE_OPTS='-Dorg.gradle.jvmargs="-Xmx1536m" -Dorg.gradle.daemon=false'
        export ANDROID_HOME=/opt/android-sdk-linux
        
        echo "=== ENVIRONMENT CHECK ==="
        echo "Display: $DISPLAY"
        echo "Java: $(java -version 2>&1 | head -1)"
        echo "Python: $(python3 --version)"
        echo "Buildozer: $(buildozer version)"
        echo "Free space: $(df -h / | tail -1)"
        echo "Memory: $(free -h | grep Mem)"
        
        echo "=== STARTING BUILD ==="
        buildozer android debug --verbose 2>&1 | tee ultimate_build.log || {
          EXIT_CODE=$?
          echo "❌ BUILD FAILED with exit code: $EXIT_CODE"
          echo
          echo "=== LAST 50 LINES OF BUILD LOG ==="
          tail -50 ultimate_build.log
          echo
          echo "=== SEARCHING FOR SPECIFIC ERRORS ==="
          echo ">> Gradle errors:"
          grep -i "gradle.*error\|gradle.*failed" ultimate_build.log | tail -5 || echo "None found"
          echo ">> NDK errors:"  
          grep -i "ndk.*error\|ndk.*failed" ultimate_build.log | tail -5 || echo "None found"
          echo ">> SDK errors:"
          grep -i "sdk.*error\|sdk.*failed" ultimate_build.log | tail -5 || echo "None found"
          echo ">> Java errors:"
          grep -i "java.*error\|java.*exception" ultimate_build.log | tail -5 || echo "None found"
          echo
          echo "=== BUILD DIRECTORY CONTENTS ==="
          find .buildozer -name "*.log" | head -3 | while read log; do
            echo ">>> Content of $log (last 20 lines):"
            tail -20 "$log" 2>/dev/null || echo "Cannot read $log"
          done
          echo
          exit $EXIT_CODE
        }
        
        echo "🎉 BUILD COMPLETED SUCCESSFULLY!"
        ls -la bin/

    - name: 📱 Upload APK and logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: xpense-ultimate-build-${{ github.run_number }}
        path: |
          bin/*.apk
          ultimate_build.log
          .buildozer/android/platform/build-*/build.log
        retention-days: 30
        if-no-files-found: warn

    - name: 🎯 Build Summary
      if: success()
      run: |
        echo "🎉 APK BUILD SUCCESSFUL!"
        echo "📱 APK Location: bin/"
        ls -la bin/*.apk
        echo "📊 APK Size: $(du -h bin/*.apk | cut -f1)"
        echo "✅ Download from Artifacts section above"
