name: 🔧 Fixed Ubuntu Dependencies Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  fixed-build:
    runs-on: ubuntu-20.04  # Starší Ubuntu kde libtinfo5 existuje
    timeout-minutes: 60
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🐍 Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: ☕ Java 11
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: 📦 Fix Ubuntu dependencies (Ubuntu 20.04 compatible)
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          python3-pip \
          python3-setuptools \
          build-essential \
          git \
          python3 \
          python3-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0 \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly \
          gstreamer1.0-omx \
          libmtdev-dev \
          xclip \
          xsel \
          libjpeg-dev \
          libtinfo5

    - name: 🐍 Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install buildozer==1.4.0 cython==0.29.33 kivy==2.1.0

    - name: 🔧 Cache Buildozer directories
      uses: actions/cache@v4
      with:
        path: |
          .buildozer_global
          .buildozer
        key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}

    - name: ⚙️ Create working buildozer.spec
      run: |
        cat > buildozer.spec << 'EOF'
        [app]
        title = Xpense
        package.name = xpense
        package.domain = org.example.xpense
        
        source.dir = .
        source.include_exts = py,png,jpg,kv,atlas
        
        version = 1.0
        
        requirements = python3,kivy==2.1.0
        
        [buildozer]
        log_level = 2
        warn_on_root = 1
        
        [app:android]
        android.api = 30
        android.minapi = 21
        android.ndk = 23b
        android.accept_sdk_license = True
        android.arch = armeabi-v7a
        EOF

    - name: 🧪 Use simple test app
      run: |
        cat > main.py << 'EOF'
        from kivy.app import App
        from kivy.uix.label import Label
        
        class XpenseApp(App):
            def build(self):
                return Label(text='Xpense APK Build Success!')
        
        if __name__ == '__main__':
            XpenseApp().run()
        EOF

    - name: 🚀 Build APK with Buildozer
      run: |
        export USE_SDK_WRAPPER=1
        export GRADLE_OPTS='-Dorg.gradle.jvmargs="-Xmx2048M -Dfile.encoding=UTF-8"'
        
        # Show environment
        echo "=== ENVIRONMENT INFO ==="
        python --version
        java -version
        buildozer version
        df -h
        
        echo "=== STARTING BUILD ==="
        buildozer android debug --verbose 2>&1 | tee build_output.log || {
          echo "=== BUILD FAILED ==="
          echo "Exit code: $?"
          echo "=== LAST 100 LINES ==="
          tail -100 build_output.log
          echo "=== SEARCHING FOR ERRORS ==="
          grep -i "error\|failed\|exception" build_output.log | tail -20 || echo "No clear error patterns found"
          exit 1
        }
        
        echo "=== BUILD COMPLETED ==="
        ls -la bin/ || echo "No bin directory"

    - name: 📱 Upload APK
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: xpense-fixed-apk-${{ github.run_number }}
        path: |
          bin/*.apk
          build_output.log
          .buildozer/android/platform/build-*/build.log
        retention-days: 30
        if-no-files-found: warn
